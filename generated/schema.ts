// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class People extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save People entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save People entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("People", id.toString(), this);
    }
  }

  static load(id: string): People | null {
    return changetype<People | null>(store.get("People", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get followCount(): BigInt {
    let value = this.get("followCount");
    if (!value || value.kind == ValueKind.NULL) {
      return BigInt.fromI32(0);
    } else {
      return value.toBigInt();
    }
  }

  set followCount(value: BigInt | null) {
    if (!value) {
      this.unset("followCount");
    } else {
      this.set("followCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get followedCount(): BigInt {
    let value = this.get("followedCount");
    if (!value || value.kind == ValueKind.NULL) {
      return BigInt.fromI32(0);
    } else {
      return value.toBigInt();
    }
  }

  set followedCount(value: BigInt | null) {
    if (!value) {
      this.unset("followedCount");
    } else {
      this.set("followedCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get profile(): string | null {
    let value = this.get("profile");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profile(value: string | null) {
    if (!value) {
      this.unset("profile");
    } else {
      this.set("profile", Value.fromString(<string>value));
    }
  }
}

export class Follow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Follow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Follow entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Follow", id.toString(), this);
    }
  }

  static load(id: string): Follow | null {
    return changetype<Follow | null>(store.get("Follow", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromId(): BigInt | null {
    let value = this.get("fromId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fromId(value: BigInt | null) {
    if (!value) {
      this.unset("fromId");
    } else {
      this.set("fromId", Value.fromBigInt(<BigInt>value));
    }
  }

  get toId(): BigInt | null {
    let value = this.get("toId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set toId(value: BigInt | null) {
    if (!value) {
      this.unset("toId");
    } else {
      this.set("toId", Value.fromBigInt(<BigInt>value));
    }
  }
}
